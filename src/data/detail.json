{
   "bID": 48,
    "bsubmitter": "学习",
    "btitle": "WebAPI Get请求参数传入输入带有[]不识别问题",
    "digest": null,
    "previous":
      ".Net Core 迁移之坑一 《WebAPI Get请求参数传入输入带有[]不识别问题》",
    "previousID": 46,
    "next": "Mvc model验证总结",
    "nextID": 50,
    "bcategory": "技术博文",
    "bcontent": "预览地址： [http://www.lybenson.com/bilibili/](http://www.lybenson.com/bilibili/)\r## 技术栈\r前端：vue2 + vuex + webpack + ES6/7 + stylus + nginx\r后端：koa2\r## 项目运行\r#### 源码地址:  [https://github.com/lybenson/bilibili-vue](https://github.com/lybenson/bilibili-vue) \r#### 如何运行\r运行前请先安装nodejs\rclone项目到本地\r```shell\rgit clone https://github.com/lybenson/bilibili-vue.git\r```\r前端运行\r```shell\rcd bilibili-vue\rnpm install\rnpm run dev\r```\r后端运行\r```shell\rcd bilibili-vue/bilibili-api\rnpm install\rnpm run dev\r```\r为了确保运行正确，请先运行后端服务。再运行前端，之后访问 http://localhost:8080\r## 组件\r根据首页的各模块的功能不同，划分出了共20多个可复用的组件。具体请看下方\r```shell\r├── banner  //轮播组件\r│   ├── Banner.vue\r│   └── BannerItem.vue\r├── common  // 公共组件\r│   ├── BHeader.vue\r│   ├── BMenu.vue\r│   ├── BMenuItem.vue\r│   ├── PostMaterial.vue\r│   ├── Search.vue\r│   └── TopContainer.vue\r├── content  // 主内容组件\r│   └── BContent.vue\r├── contentRow  // 单个分类的组件\r│   ├── BContentRow.vue\r│   ├── BRowBody.vue\r│   ├── BRowHead.vue\r│   ├── BRowItem.vue\r│   ├── BRowRank.vue\r│   └── BRowRankBody.vue\r├── contentTop  // 页面顶部组件\r│   ├── BContentTop.vue\r│   └── BContentTopItem.vue\r├── live  //直播所在的组件\r│   ├── BLive.vue\r│   ├── BLiveItem.vue\r│   ├── BLiveRank.vue\r│   └── BLiveRankItem.vue\r├── nav  //右侧导航条组件\r│   ├── BNavSide.vue\r│   └── smooth-scroll.js\r└── promote  // 推广组件\r  ├── BPromote.vue\r  └── BPromoteItem.vue\r```\r组件的原则就是尽量将复杂的UI布局划分成单个小的UI组件，逻辑处理也被划分成更多的单个小的逻辑。数据流动采用的单向数据流动。子组件的数据更多的是来自于父组件，父组件的数据主要是其本身发起的`ajax`请求。本项目中`ajax`请求库使用的是`axios`。\r## 状态管理\r目前的状态管理采用`vuex`。由于`vuex`可以分多个子`module`。所以在不同模块下单独维护一份状态，同时对于一些公共的状态，比如发起网络请求的`requesting`，错误时的状态`error`则保存在根状态中，之后可以通过子模块中的`rootState.requesting`获取来赋值。\r在子模块中发送网络请求获取数据是一个异步的过程，所以将网络请求放在`actions`。每次发起网络需要经历下面的步骤\r1. 请求中\r ```\r rootState.requesting = true  //请求状态更新为true,表示请求中\r commit(TYPE.XX_REQUEST)  // 发送同步操作，请求中的数据处理\r ```\r2. 请求成功\r ```\r rootState.requesting = false  //请求状态更新为false,表示请求结束\r commit(TYPE.XX_SUCCESS, response) //发送同步操作,处理请求成功后数据\r ```\r3. 请求失败\r ```\r rootState.requesting = false  //请求状态更新为false,表示请求结束\r rootState.error = error\r commit(TYPE.XX_FAILURE, error) //发送同步操作,处理请求失败\r ```\r## 动画\rB站首页充斥着大量的动画效果。目前动画使用的主要有三种方式：\r1. 以`hover`效果触发。\r2. 通过`js`触发的效果，如点击轮播图的原点时，主要通过设置css属性`transition: .2s;`，再通过`js` 设置css属性`this.$refs.banner.style.marginLeft = left`。\r3. 通过`vue`提供的动画方式。\r ```javascript\r <transition name=\"fade\">\r  <div v-if=\"isSort\">\r      <div class=\"tip\"></div>\r      <div class=\"custom-bg\"></div>\r  </div>\r </transition>\r ```\r## 样式\r样式文件使用的是`stylus`，暂未使用任何`vue`现成的UI组件。需要安装`stylus-loader`, `stylus`，由于`vue-cli`中的`webpack`已经配置好了`stylus`了，所以只需要安装就可以了。\r```shell\rnpm install stylus-loader --save-dev\rnpm install stylus --save-dev\r```\r## 性能优化\r* 图片懒加载\r* 压缩`js`、`css`\r* 服务器开启`gzip`\r* 浏览器缓存\r* ...\r## 发布\r完成项目后将发布到自己的服务器上，首先确保服务器已安装`nodejs`，具体安装步骤不再赘述。\r#### 后端发布\r后端采用`pm2`做项目管理\r安装`pm2`\r```shell\rnpm install pm2 -g\r```\r启动项目\r```\rcd bilibili-api && npm install \rpm2 start index.js\r```\r#### 前端发布\r1. `webpack`打包\r```\rnpm run build\r```\r需要注意的是，直接运行此命令可能会导致资源无法找到的问题。所以需要对`webpack`配置做一定的修改。\r在`webpack.base.conf.js`文件中修改`publicPath`如下\r```javascript\routput: {\r  path: config.build.assetsRoot,\r  publicPath: './',  \r  //资源的公共路径\r  // publicPath: process.env.NODE_ENV === 'production' ? config.build.assetsPublicPath : config.dev.assetsPublicPath,\r  filename: '[name].js'\r}\r```\r这样打包后还会出现`stylus`中`background-image `资源无法找到的问题，我采用的方式修改`ExtractTextPlugin`配置，在`webpack.prod.conf.js`中修改\r```javascript\rnew ExtractTextPlugin('[name].[contenthash].css')\r```\r将分离的`css`打包路径分离到`static`文件夹之外。\r打包完成后上传到服务器`/var/www/html/bilibili`目录下。\r2. 配置nginx服务器。\r ```\r location /bilibili {\r   root /var/www/html;\r   index index.html;\r }\r ```\r## 总结\r目前主要功能都已经完成的差不多。主要还差一个预览视频与弹幕的功能尚未完成，希望能把B站首页写完，并且会持续更新中，后面可能会加上直播等功能。\r#### 相关截图:\r首页：\r![20170423210104.png](http://upload-images.jianshu.io/upload_images/426435-d2a3e8b1463cdd2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r轮播：\r![20170423213449.png](http://upload-images.jianshu.io/upload_images/426435-edce08bcca33c6a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r直播：\r![20170423210140.png](http://upload-images.jianshu.io/upload_images/426435-c2a8412724f6a121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r![20170423210218.png](http://upload-images.jianshu.io/upload_images/426435-e0f463350b7b5f21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r排行：\r![20170423210248.png](http://upload-images.jianshu.io/upload_images/426435-6c61dcd032f80f92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r游戏：\r![20170423213519.png](http://upload-images.jianshu.io/upload_images/426435-bf8786eee29a4f3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r拖拽排序与滚动效果：\r![20170423213599.png](http://upload-images.jianshu.io/upload_images/426435-1ef3ae591420a074.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r## 测试 \r ## 测试 \r ## 测试 \r ## 测试 \r",
    "btraffic": 145,
    "bcommentNum": 0,
    "bUpdateTime": "2019-01-01T00:00:00",
    "bCreateTime": "2019-01-01T00:00:00",
    "bRemark": null
  }